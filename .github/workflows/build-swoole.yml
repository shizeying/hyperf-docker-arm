name: Build Swoole

on: [ push ]
env:
  ENGINE: 'swoole'
  SW_VERSION: 'v5.0.2'
  COMPOSER_VERSION: '2.5.4'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_ACCESSTOKEN }}
jobs:
  build:
    name: Build PHP ${{ matrix.php-version }} Alpine ${{ matrix.alpine-version }}
    runs-on: 'ubuntu-latest'
    env:
      ALPINE_VERSION: '${{ matrix.alpine-version }}'
      PHP_VERSION: '${{ matrix.php-version }}'
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        #        , '3.14', '3.15', '3.16', '3.17'
        alpine-version: [ '3.13' ]
        php-version: [ '7.4' ]
        exclude:
          - php-version: '7.4'
            alpine-version: '3.16'
          - php-version: '7.4'
            alpine-version: '3.17'
          - php-version: '8.1'
            alpine-version: '3.12'
          - php-version: '8.1'
            alpine-version: '3.13'
          - php-version: '8.1'
            alpine-version: '3.14'
      max-parallel: 16
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }} # 你的个人访问令牌
      #      - name: Fetch the PHP BUILD VERSION
      #        id: fetch-php-build-version
      #        shell: php {0}
      #        run: |
      #          <?php
      #          $alpineVersion = getenv('ALPINE_VERSION');
      #          $phpVersion = getenv('PHP_VERSION');
      #          if ($phpVersion == '8.1' && in_array($alpineVersion, ['3.16'])) {
      #              $version = '81';
      #          } else {
      #              $version = substr($phpVersion, 0, 1);
      #          }
      #          echo "::set-output name=version::" . $version . PHP_EOL;
      #      - name: Build and Push Docker base image
      #        run: |
      #          docker buildx build \
      #            --build-arg ALPINE_VERSION=${{ matrix.alpine-version }} \
      #            --file ${{ env.PHP_VERSION }}/alpine/base/Dockerfile \
      #            --tag ghcr.io/${{ github.repository_owner }}/hyperf:${{ matrix.php-version }}-alpine-v${{ matrix.alpine-version }}-base \
      #            --platform linux/amd64,linux/arm64 \
      #            --push .

      #      - name: Build and Push Docker swoole image
      #        run: |
      #          docker buildx build \
      #            --build-arg ALPINE_VERSION=${{ matrix.alpine-version }} \
      #            --file ${{ env.PHP_VERSION }}/alpine/swoole/Dockerfile \
      #            --tag ghcr.io/${{ github.repository_owner }}/hyperf:${{ matrix.php-version }}-alpine-v${{ matrix.alpine-version }}-swoole \
      #            --platform linux/amd64,linux/arm64 \
      #            --push .
      #      - name: Build and Push Docker snow image
      #        run: |
      #          docker buildx build \
      #            --build-arg ALPINE_VERSION=${{ matrix.alpine-version }} \
      #            --file ${{ env.PHP_VERSION }}/alpine/swow/Dockerfile \
      #            --tag ghcr.io/${{ github.repository_owner }}/hyperf:${{ matrix.php-version }}-alpine-v${{ matrix.alpine-version }}-swow \
      #            --platform linux/amd64,linux/arm64 \
      #            --push .
      - name: Clean up dangling images in GHCR
        run: |
          while :  # 无限循环，直到没有悬空镜像为止
          do
          # Get a list of image versions for a specific package
          IMAGE_VERSIONS=$(curl -s -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/packages/container/hyperf/versions")

          echo "Image versions: $IMAGE_VERSIONS"

          # Parse the list and find dangling images
          DANGLING_IMAGES=$(echo "$IMAGE_VERSIONS" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id')

          echo "Dangling image IDs: $DANGLING_IMAGES"
          if [[ -z "$DANGLING_IMAGES" ]]; then
          echo "No dangling images found. Exiting loop."
            break  # 如果没有悬空镜像，跳出循环
          fi
          # Delete each dangling image
          for IMAGE_ID in $DANGLING_IMAGES
          do
            echo "Deleting image version with ID: $IMAGE_ID \n https://api.github.com/user/packages/container/hyperf/versions/$IMAGE_ID"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 "https://api.github.com/user/packages/container/hyperf/versions/$IMAGE_ID"
          done
                echo "Waiting for a while before the next iteration..."
          sleep 1  # 等待5秒，防止过快地发送请求导致的限制或其他问题
          done
